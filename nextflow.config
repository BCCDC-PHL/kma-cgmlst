manifest {
  author = 'Dan Fornika <dan.fornika@bccdc.ca>, Sherrie Wang <sherrie.wang@bccdc.ca>'
  name = 'BCCDC-PHL/kma-cgmlst'
  version = '0.1.0'
  description = 'BCCDC-PHL kma cgMLST'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
  profile = false
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  samplesheet_inpt = 'NO_FILE'
  versioned_outdir = false
  pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
  pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
      conda.cacheDir = params.cache
    }
  }
}

process {
  withName: kma_align { 
    cpus = 4
  }
}